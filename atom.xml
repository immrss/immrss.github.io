<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Simon</title>
  <subtitle>Thinking and writing</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://simonyang.cn/"/>
  <updated>2017-12-18T15:08:35.000Z</updated>
  <id>http://simonyang.cn/</id>
  
  <author>
    <name>Simon</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>FMDatabaseQueue</title>
    <link href="http://simonyang.cn/2017/12/18/fmdb-safe/"/>
    <id>http://simonyang.cn/2017/12/18/fmdb-safe/</id>
    <published>2017-12-18T14:35:10.000Z</published>
    <updated>2017-12-18T15:08:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>在数据库使用过程中，如果涉及到多线程访问，会有线程安全。<code>FMDatabase</code>实例是非线程安全的，你只能同一个线程访问它。fmdb提供了<code>FMDatabaseQueue</code>来实现多线程下数据库操作。<br><a id="more"></a></p>
<h4 id="多线程操作实例"><a href="#多线程操作实例" class="headerlink" title="多线程操作实例"></a>多线程操作实例</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">NSString</span> *path = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)[<span class="number">0</span>];</div><div class="line">path = [path stringByAppendingPathComponent:<span class="string">@"test.db"</span>];</div><div class="line">_databaseQueue = [FMDatabaseQueue databaseQueueWithPath:path];</div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">    [_databaseQueue inTransaction:^(FMDatabase * _Nonnull db, <span class="built_in">BOOL</span> * _Nonnull rollback) &#123;</div><div class="line">        <span class="built_in">BOOL</span> bo = [db executeUpdate:<span class="string">@"create table if not exists t_person (id integer primary key autoincrement,name text not null,age integer);"</span>];</div><div class="line">        <span class="keyword">if</span> (bo) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"建表成功 thread: %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"建表失败 thread: %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;);</div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">    [_databaseQueue inTransaction:^(FMDatabase * _Nonnull db, <span class="built_in">BOOL</span> * _Nonnull rollback) &#123;</div><div class="line">        <span class="built_in">BOOL</span> bo = [db executeUpdate:<span class="string">@"insert into t_person(name ,age) values(?,?);"</span>,<span class="string">@"simon"</span>,<span class="string">@"26"</span>];</div><div class="line">        <span class="keyword">if</span> (bo) &#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"插入成功 thread: %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"插入失败 thread: %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;);</div><div class="line"><span class="built_in">dispatch_async</span>(dispatch_get_global_queue(<span class="number">0</span>, <span class="number">0</span>), ^&#123;</div><div class="line">    [_databaseQueue inTransaction:^(FMDatabase * _Nonnull db, <span class="built_in">BOOL</span> * _Nonnull rollback) &#123;</div><div class="line">        FMResultSet * set = [db executeQuery:<span class="string">@"select * from t_person;"</span>];</div><div class="line">        <span class="keyword">if</span> ([set next]) &#123;</div><div class="line">            <span class="built_in">NSString</span> *name = [set stringForColumn:<span class="string">@"name"</span>];</div><div class="line">            <span class="built_in">NSInteger</span> age = [set intForColumn:<span class="string">@"age"</span>];</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"name = %@,age = %ld  thread: %@"</span>,name,age,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="built_in">NSLog</span>(<span class="string">@"查询出错 thread: %@"</span>,[<span class="built_in">NSThread</span> currentThread]);</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>输入结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">建表成功 thread: &lt;NSThread: 0x60400006ba00&gt;&#123;number = 3, name = (null)&#125;</div><div class="line">插入成功 thread: &lt;NSThread: 0x60400006bf40&gt;&#123;number = 4, name = (null)&#125;</div><div class="line">name = simon,age = 26  thread: &lt;NSThread: 0x60c00006e040&gt;&#123;number = 5, name = (null)&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到数据库每一步操作都是在不同的线程执行的，而且执行的顺序和添加的顺序一致。</p>
<p>FMDatabaseQueue内部会新建一个串行队列queue，并为queue关联一个上下文值，这里设置为当前对象self。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">_queue = dispatch_queue_create([[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"fmdb.%@"</span>, <span class="keyword">self</span>] UTF8String], <span class="literal">NULL</span>);</div><div class="line">dispatch_queue_set_specific(_queue, kDispatchQueueSpecificKey, (__bridge <span class="keyword">void</span> *)<span class="keyword">self</span>, <span class="literal">NULL</span>);</div></pre></td></tr></table></figure></p>
<p>在操做数据库之前，根据<code>kDispatchQueueSpecificKey</code>获取当前队列的上下文值。如果该值等于<code>self</code>，表名当前执行队列就是内部的串行队列<code>queue</code>，会触发断言，否则以下的操作会造成死锁。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">FMDatabaseQueue *currentSyncQueue = (__bridge <span class="keyword">id</span>)dispatch_get_specific(kDispatchQueueSpecificKey);</div><div class="line">assert(currentSyncQueue != <span class="keyword">self</span> &amp;&amp; <span class="string">"inDatabase: was called reentrantly on the same queue, which would lead to a deadlock"</span>);</div></pre></td></tr></table></figure></p>
<p>在串行队列<code>queue</code>里同步执行<code>block</code>，将内部的<code>database</code>对象传给调用方。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (FMDatabase*)database &#123;</div><div class="line">    <span class="keyword">if</span> (!_db) &#123;</div><div class="line">       _db = FMDBReturnRetained([[[<span class="keyword">self</span> <span class="keyword">class</span>] databaseClass] databaseWithPath:_path]);</div><div class="line"><span class="meta">#if SQLITE_VERSION_NUMBER &gt;= 3005000</span></div><div class="line">        <span class="built_in">BOOL</span> success = [_db openWithFlags:_openFlags vfs:_vfsName];</div><div class="line"><span class="meta">#else</span></div><div class="line">        <span class="built_in">BOOL</span> success = [_db open];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> _db;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>aasdasd</p>
</blockquote>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">dispatch_sync</span>(_queue, ^() &#123;</div><div class="line">    FMDatabase *db = [<span class="keyword">self</span> database];</div><div class="line">    block(db);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在数据库使用过程中，如果涉及到多线程访问，会有线程安全。&lt;code&gt;FMDatabase&lt;/code&gt;实例是非线程安全的，你只能同一个线程访问它。fmdb提供了&lt;code&gt;FMDatabaseQueue&lt;/code&gt;来实现多线程下数据库操作。&lt;br&gt;
    
    </summary>
    
    
      <category term="fmdb" scheme="http://simonyang.cn/tags/fmdb/"/>
    
      <category term="线程安全" scheme="http://simonyang.cn/tags/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>fmdb</title>
    <link href="http://simonyang.cn/2017/11/17/fmdborm/"/>
    <id>http://simonyang.cn/2017/11/17/fmdborm/</id>
    <published>2017-11-16T16:30:54.000Z</published>
    <updated>2017-11-16T16:35:41.292Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="sqlite" scheme="http://simonyang.cn/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>FMDB的一些实现细节</title>
    <link href="http://simonyang.cn/2017/11/17/fmdb/"/>
    <id>http://simonyang.cn/2017/11/17/fmdb/</id>
    <published>2017-11-16T16:30:44.000Z</published>
    <updated>2017-11-16T16:35:46.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="sqlite" scheme="http://simonyang.cn/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>使用SQLCipher加密sqlite数据库</title>
    <link href="http://simonyang.cn/2017/11/17/SQLCipher/"/>
    <id>http://simonyang.cn/2017/11/17/SQLCipher/</id>
    <published>2017-11-16T16:29:57.000Z</published>
    <updated>2017-11-16T16:32:55.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>互斥锁和自旋锁</title>
    <link href="http://simonyang.cn/2017/10/18/sem-mutex-spin/"/>
    <id>http://simonyang.cn/2017/10/18/sem-mutex-spin/</id>
    <published>2017-10-17T17:20:37.000Z</published>
    <updated>2017-10-18T18:53:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h2><h2 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h2><p>自旋锁也是为实现保护共享资源的一种锁机制。和互斥锁相同，在任何时刻，最多只有一个线程获得锁。但是两者在调度机制上略有不同。<strong>自旋锁不会引起调用者线程休眠。</strong>如果自旋锁已经被其他线程所持有，当前调用者就一直循环查看该锁是否被保持者释放。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;互斥锁&quot;&gt;&lt;a href=&quot;#互斥锁&quot; class=&quot;headerlink&quot; title=&quot;互斥锁&quot;&gt;&lt;/a&gt;互斥锁&lt;/h2&gt;&lt;h2 id=&quot;自旋锁&quot;&gt;&lt;a href=&quot;#自旋锁&quot; class=&quot;headerlink&quot; title=&quot;自旋锁&quot;&gt;&lt;/a&gt;自旋锁&lt;/h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Websocket原理与实践</title>
    <link href="http://simonyang.cn/2017/09/13/websocket/"/>
    <id>http://simonyang.cn/2017/09/13/websocket/</id>
    <published>2017-09-13T14:01:13.000Z</published>
    <updated>2017-12-18T15:54:53.971Z</updated>
    
    <content type="html"><![CDATA[<p>Websocket原理与实践<br><a id="more"></a></p>
<h3 id="客户端向服务端发送握手信息"><a href="#客户端向服务端发送握手信息" class="headerlink" title="客户端向服务端发送握手信息"></a>客户端向服务端发送握手信息</h3><ol>
<li>握手必须是一个有效的HTTP请求</li>
<li>请求方法必须是<code>GET</code>，HTTP版本至少是<code>1.1</code></li>
<li></li>
<li>请求必须有<code>Host</code>头字段，它的值是<code>host:port</code></li>
<li>请求必须有一个<code>Upgrade</code>头字段，它的值必须是<code>websocket</code></li>
<li>请求必须有一个<code>Connection</code>头字段，它的值必须是<code>Upgrade</code></li>
<li>请求必须有一个<code>Sec-WebSocket-key</code>头字段，他的值必须是一个噪音值，由16个字节随机数经过base64编码而成。每个连接的噪音必须是不同且随机的。</li>
<li></li>
<li>请求必须有一个<code>Sec-WebSocket-Version</code>头字段，它的值必须是<code>13</code></li>
</ol>
<h4 id="接下来看SocketRocket的实现："><a href="#接下来看SocketRocket的实现：" class="headerlink" title="接下来看SocketRocket的实现："></a>接下来看SocketRocket的实现：</h4><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">- (<span class="keyword">void</span>)didConnect;</div><div class="line">&#123;</div><div class="line">    SRFastLog(<span class="string">@"Connected"</span>);</div><div class="line">    <span class="built_in">CFHTTPMessageRef</span> request = <span class="built_in">CFHTTPMessageCreateRequest</span>(<span class="literal">NULL</span>, <span class="built_in">CFSTR</span>(<span class="string">"GET"</span>), (__bridge <span class="built_in">CFURLRef</span>)_url, kCFHTTPVersion1_1);</div><div class="line">    </div><div class="line">    <span class="comment">// Set host first so it defaults</span></div><div class="line">    <span class="built_in">CFHTTPMessageSetHeaderFieldValue</span>(request, <span class="built_in">CFSTR</span>(<span class="string">"Host"</span>), (__bridge <span class="built_in">CFStringRef</span>)(_url.port ? [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@:%@"</span>, _url.host, _url.port] : _url.host));</div><div class="line">        </div><div class="line">    <span class="built_in">NSMutableData</span> *keyBytes = [[<span class="built_in">NSMutableData</span> alloc] initWithLength:<span class="number">16</span>];</div><div class="line">    SecRandomCopyBytes(kSecRandomDefault, keyBytes.length, keyBytes.mutableBytes);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ([keyBytes respondsToSelector:<span class="keyword">@selector</span>(base64EncodedStringWithOptions:)]) &#123;</div><div class="line">        _secKey = [keyBytes base64EncodedStringWithOptions:<span class="number">0</span>];</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="meta">#pragma clang diagnostic push</span></div><div class="line"><span class="meta">#pragma clang diagnostic ignored <span class="meta-string">"-Wdeprecated-declarations"</span></span></div><div class="line">        _secKey = [keyBytes base64Encoding];</div><div class="line"><span class="meta">#pragma clang diagnostic pop</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    assert([_secKey length] == <span class="number">24</span>);</div><div class="line"></div><div class="line">    <span class="comment">// Apply cookies if any have been provided</span></div><div class="line">    <span class="built_in">NSDictionary</span> * cookies = [<span class="built_in">NSHTTPCookie</span> requestHeaderFieldsWithCookies:[<span class="keyword">self</span> requestCookies]];</div><div class="line">    <span class="keyword">for</span> (<span class="built_in">NSString</span> * cookieKey <span class="keyword">in</span> cookies) &#123;</div><div class="line">        <span class="built_in">NSString</span> * cookieValue = [cookies objectForKey:cookieKey];</div><div class="line">        <span class="keyword">if</span> ([cookieKey length] &amp;&amp; [cookieValue length]) &#123;</div><div class="line">            <span class="built_in">CFHTTPMessageSetHeaderFieldValue</span>(request, (__bridge <span class="built_in">CFStringRef</span>)cookieKey, (__bridge <span class="built_in">CFStringRef</span>)cookieValue);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="comment">// set header for http basic auth</span></div><div class="line">    <span class="keyword">if</span> (_url.user.length &amp;&amp; _url.password.length) &#123;</div><div class="line">        <span class="built_in">NSData</span> *userAndPassword = [[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@:%@"</span>, _url.user, _url.password] dataUsingEncoding:<span class="built_in">NSUTF8StringEncoding</span>];</div><div class="line">        <span class="built_in">NSString</span> *userAndPasswordBase64Encoded;</div><div class="line">        <span class="keyword">if</span> ([keyBytes respondsToSelector:<span class="keyword">@selector</span>(base64EncodedStringWithOptions:)]) &#123;</div><div class="line">            userAndPasswordBase64Encoded = [userAndPassword base64EncodedStringWithOptions:<span class="number">0</span>];</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line"><span class="meta">#pragma clang diagnostic push</span></div><div class="line"><span class="meta">#pragma clang diagnostic ignored <span class="meta-string">"-Wdeprecated-declarations"</span></span></div><div class="line">            userAndPasswordBase64Encoded = [userAndPassword base64Encoding];</div><div class="line"><span class="meta">#pragma clang diagnostic pop</span></div><div class="line">        &#125;</div><div class="line">        _basicAuthorizationString = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"Basic %@"</span>, userAndPasswordBase64Encoded];</div><div class="line">        <span class="built_in">CFHTTPMessageSetHeaderFieldValue</span>(request, <span class="built_in">CFSTR</span>(<span class="string">"Authorization"</span>), (__bridge <span class="built_in">CFStringRef</span>)_basicAuthorizationString);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">CFHTTPMessageSetHeaderFieldValue</span>(request, <span class="built_in">CFSTR</span>(<span class="string">"Upgrade"</span>), <span class="built_in">CFSTR</span>(<span class="string">"websocket"</span>));</div><div class="line">    <span class="built_in">CFHTTPMessageSetHeaderFieldValue</span>(request, <span class="built_in">CFSTR</span>(<span class="string">"Connection"</span>), <span class="built_in">CFSTR</span>(<span class="string">"Upgrade"</span>));</div><div class="line">    <span class="built_in">CFHTTPMessageSetHeaderFieldValue</span>(request, <span class="built_in">CFSTR</span>(<span class="string">"Sec-WebSocket-Key"</span>), (__bridge <span class="built_in">CFStringRef</span>)_secKey);</div><div class="line">    <span class="built_in">CFHTTPMessageSetHeaderFieldValue</span>(request, <span class="built_in">CFSTR</span>(<span class="string">"Sec-WebSocket-Version"</span>), (__bridge <span class="built_in">CFStringRef</span>)[<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%ld"</span>, (<span class="keyword">long</span>)_webSocketVersion]);</div><div class="line">    </div><div class="line">    <span class="built_in">CFHTTPMessageSetHeaderFieldValue</span>(request, <span class="built_in">CFSTR</span>(<span class="string">"Origin"</span>), (__bridge <span class="built_in">CFStringRef</span>)_url.SR_origin);</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (_requestedProtocols) &#123;</div><div class="line">        <span class="built_in">CFHTTPMessageSetHeaderFieldValue</span>(request, <span class="built_in">CFSTR</span>(<span class="string">"Sec-WebSocket-Protocol"</span>), (__bridge <span class="built_in">CFStringRef</span>)[_requestedProtocols componentsJoinedByString:<span class="string">@", "</span>]);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    [_urlRequest.allHTTPHeaderFields enumerateKeysAndObjectsUsingBlock:^(<span class="keyword">id</span> key, <span class="keyword">id</span> obj, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">        <span class="built_in">CFHTTPMessageSetHeaderFieldValue</span>(request, (__bridge <span class="built_in">CFStringRef</span>)key, (__bridge <span class="built_in">CFStringRef</span>)obj);</div><div class="line">    &#125;];</div><div class="line">    </div><div class="line">    <span class="built_in">NSData</span> *message = <span class="built_in">CFBridgingRelease</span>(<span class="built_in">CFHTTPMessageCopySerializedMessage</span>(request));</div><div class="line">    </div><div class="line">    <span class="built_in">CFRelease</span>(request);</div><div class="line"></div><div class="line">    [<span class="keyword">self</span> _writeData:message];</div><div class="line">    [<span class="keyword">self</span> _readHTTPHeader];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)_checkHandshake:(<span class="built_in">CFHTTPMessageRef</span>)httpMessage;</div><div class="line">&#123;</div><div class="line">    <span class="built_in">NSString</span> *acceptHeader = <span class="built_in">CFBridgingRelease</span>(<span class="built_in">CFHTTPMessageCopyHeaderFieldValue</span>(httpMessage, <span class="built_in">CFSTR</span>(<span class="string">"Sec-WebSocket-Accept"</span>)));</div><div class="line">    <span class="keyword">if</span> (acceptHeader == <span class="literal">nil</span>) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">NO</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">NSString</span> *concattedString = [_secKey stringByAppendingString:SRWebSocketAppendToSecKeyString];</div><div class="line">    <span class="built_in">NSString</span> *expectedAccept = [concattedString stringBySHA1ThenBase64Encoding];</div><div class="line">    <span class="keyword">return</span> [acceptHeader isEqualToString:expectedAccept];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务端返回的响应头中取<code>Sec-WebSocket-Accept</code>字段的值，如果为空，则握手失败。然后将客户端随机生成的key<code>_secKey</code>拼接上 258EAFA5-E914-47DA-95CA-C5AB0DC85B11 (该字符串固定)进行<code>SHA-1编码</code>后得到字节做<code>base64编码</code>得到字符串，与<code>Sec-WebSocket-Accept</code>字段的值比较，如果不同则握手失败。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Websocket原理与实践&lt;br&gt;
    
    </summary>
    
    
      <category term="网络" scheme="http://simonyang.cn/tags/%E7%BD%91%E7%BB%9C/"/>
    
      <category term="websocket" scheme="http://simonyang.cn/tags/websocket/"/>
    
  </entry>
  
  <entry>
    <title>Sqlite操作汇总</title>
    <link href="http://simonyang.cn/2017/08/20/sqlite/"/>
    <id>http://simonyang.cn/2017/08/20/sqlite/</id>
    <published>2017-08-20T06:06:22.000Z</published>
    <updated>2017-11-16T16:35:36.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="sqlite" scheme="http://simonyang.cn/tags/sqlite/"/>
    
  </entry>
  
  <entry>
    <title>OC中的异常</title>
    <link href="http://simonyang.cn/2017/08/18/NSException/"/>
    <id>http://simonyang.cn/2017/08/18/NSException/</id>
    <published>2017-08-18T15:55:01.000Z</published>
    <updated>2017-12-18T15:55:27.510Z</updated>
    
    <content type="html"><![CDATA[<p>NSException<br><a id="more"></a></p>
<h3 id="基础使用"><a href="#基础使用" class="headerlink" title="基础使用"></a>基础使用</h3><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//创建异常</span></div><div class="line">[<span class="built_in">NSException</span> exceptionWithName:<span class="built_in">NSInvalidArgumentException</span> reason:<span class="string">@"数组越界啦"</span> userInfo:@&#123;&#125;];</div><div class="line">[[<span class="built_in">NSException</span> alloc]initWithName:<span class="built_in">NSInvalidArgumentException</span> reason:<span class="string">@"数组越界啦"</span> userInfo:@&#123;&#125;];</div><div class="line"></div><div class="line"><span class="comment">//实例方法抛出异常</span></div><div class="line">[exception raise];</div><div class="line"></div><div class="line"><span class="comment">//类方法抛出异常</span></div><div class="line">[<span class="built_in">NSException</span> raise:<span class="built_in">NSInvalidArgumentException</span> format:<span class="string">@"数组越界啦"</span>];</div><div class="line"></div><div class="line"><span class="comment">//@throw关键字</span></div><div class="line"><span class="keyword">@throw</span> [<span class="built_in">NSException</span> exceptionWithName:<span class="built_in">NSInvalidArgumentException</span> reason:<span class="string">@"数组越界啦"</span> userInfo:@&#123;&#125;];</div></pre></td></tr></table></figure>
<p>控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">*** Terminating app due to uncaught exception &apos;NSInvalidArgumentException&apos;, reason: &apos;数组越界啦&apos;</div><div class="line">*** First throw call stack:</div><div class="line">(</div><div class="line">	0   CoreFoundation                      0x0000000102d8979b __exceptionPreprocess + 171</div><div class="line">	1   libobjc.A.dylib                     0x00000001026eb121 objc_exception_throw + 48</div><div class="line">	2   CoreFoundation                      0x0000000102e02b25 +[NSException raise:format:] + 197</div><div class="line">	3   exc                                 0x0000000101de049f -[ViewController viewDidLoad] + 95</div><div class="line">	4   UIKit                               0x000000010339d4ec -[UIViewController loadViewIfRequired] + 1235</div><div class="line">	5   UIKit                               0x000000010339d939 -[UIViewController view] + 27</div><div class="line">	6   UIKit                               0x0000000103278903 -[UIWindow addRootViewControllerViewIfPossible] + 122</div><div class="line">	7   UIKit                               0x0000000103278ff5 -[UIWindow _setHidden:forced:] + 294</div><div class="line">	8   UIKit                               0x000000010328bd3b -[UIWindow makeKeyAndVisible] + 42</div><div class="line">	9   UIKit                               0x00000001032011a4 -[UIApplication _callInitializationDelegatesForMainScene:transitionContext:] + 4711</div><div class="line">	10  UIKit                               0x00000001032065cd -[UIApplication _runWithMainScene:transitionContext:completion:] + 1720</div><div class="line">	11  UIKit                               0x00000001035a3d3d __111-[__UICanvasLifecycleMonitor_Compatability _scheduleFirstCommitForScene:transition:firstActivation:completion:]_block_invoke + 111</div><div class="line">	12  UIKit                               0x000000010395b86d +[_UICanvas _enqueuePostSettingUpdateTransactionBlock:] + 153</div><div class="line">	13  UIKit                               0x00000001035a3c63 -[__UICanvasLifecycleMonitor_Compatability _scheduleFirstCommitForScene:transition:firstActivation:completion:] + 249</div><div class="line">	14  UIKit                               0x00000001035a3fff -[__UICanvasLifecycleMonitor_Compatability activateEventsOnly:withContext:completion:] + 530</div><div class="line">	15  UIKit                               0x0000000103ec010a __82-[_UIApplicationCanvas _transitionLifecycleStateWithTransitionContext:completion:]_block_invoke + 259</div><div class="line">	16  UIKit                               0x0000000103ebffc6 -[_UIApplicationCanvas _transitionLifecycleStateWithTransitionContext:completion:] + 444</div><div class="line">	17  UIKit                               0x0000000103bc752d __125-[_UICanvasLifecycleSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:]_block_invoke + 221</div><div class="line">	18  UIKit                               0x0000000103db55fa _performActionsWithDelayForTransitionContext + 100</div><div class="line">	19  UIKit                               0x0000000103bc73f0 -[_UICanvasLifecycleSettingsDiffAction performActionsForCanvas:withUpdatedScene:settingsDiff:fromSettings:transitionContext:] + 231</div><div class="line">	20  UIKit                               0x000000010395aeca -[_UICanvas scene:didUpdateWithDiff:transitionContext:completion:] + 392</div><div class="line">	21  UIKit                               0x0000000103204e80 -[UIApplication workspace:didCreateScene:withTransitionContext:completion:] + 664</div><div class="line">	22  UIKit                               0x00000001037a2094 -[UIApplicationSceneClientAgent scene:didInitializeWithEvent:completion:] + 369</div><div class="line">	23  FrontBoardServices                  0x00000001071e05c8 -[FBSSceneImpl _didCreateWithTransitionContext:completion:] + 338</div><div class="line">	24  FrontBoardServices                  0x00000001071e9025 __56-[FBSWorkspace client:handleCreateScene:withCompletion:]_block_invoke_2 + 235</div><div class="line">	25  libdispatch.dylib                   0x00000001065e5658 _dispatch_client_callout + 8</div><div class="line">	26  libdispatch.dylib                   0x00000001065eae6b _dispatch_block_invoke_direct + 589</div><div class="line">	27  FrontBoardServices                  0x00000001072147e3 __FBSSERIALQUEUE_IS_CALLING_OUT_TO_A_BLOCK__ + 24</div><div class="line">	28  FrontBoardServices                  0x0000000107214499 -[FBSSerialQueue _performNext] + 464</div><div class="line">	29  FrontBoardServices                  0x0000000107214a08 -[FBSSerialQueue _performNextFromRunLoopSource] + 45</div><div class="line">	30  CoreFoundation                      0x0000000102d2ce71 __CFRUNLOOP_IS_CALLING_OUT_TO_A_SOURCE0_PERFORM_FUNCTION__ + 17</div><div class="line">	31  CoreFoundation                      0x0000000102d1156f __CFRunLoopDoSources0 + 271</div><div class="line">	32  CoreFoundation                      0x0000000102d10b1f __CFRunLoopRun + 1039</div><div class="line">	33  CoreFoundation                      0x0000000102d10499 CFRunLoopRunSpecific + 409</div><div class="line">	34  GraphicsServices                    0x0000000107b229d7 GSEventRunModal + 62</div><div class="line">	35  UIKit                               0x00000001032080b8 UIApplicationMain + 159</div><div class="line">	36  exc                                 0x0000000101de055f main + 111</div><div class="line">	37  libdyld.dylib                       0x0000000106666771 start + 1</div><div class="line">	38  ???                                 0x0000000000000001 0x0 + 1</div><div class="line">)</div><div class="line">libc++abi.dylib: terminating with uncaught exception of type NSException</div></pre></td></tr></table></figure></p>
<p>抛出异常的信息不仅有<code>name</code>、<code>reason</code>还有异常抛出时的方法调用栈<code>callStackSymbols</code>。</p>
<h3 id="常见异常"><a href="#常见异常" class="headerlink" title="常见异常"></a>常见异常</h3><h4 id="NSInvalidArgumentException"><a href="#NSInvalidArgumentException" class="headerlink" title="NSInvalidArgumentException"></a>NSInvalidArgumentException</h4><p>参数错误，常见的有数组或字典插入nil对象、调用不存在的方法都会抛出该NSExceptionName的异常。</p>
<h4 id="NSRangeException"><a href="#NSRangeException" class="headerlink" title="NSRangeException"></a>NSRangeException</h4><p>范围异常，最常见的就是数组访问越界。</p>
<h3 id="异常捕捉"><a href="#异常捕捉" class="headerlink" title="异常捕捉"></a>异常捕捉</h3><p>OC提供了<code>try-catch</code>来捕捉一个异常。在<code>try</code>代码块中执行一些可能抛出异常的操作,可以在<code>catch</code>代码块中捕捉到该异常而不至于程序退出。最终代码会执行到<code>finally</code>块中。<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">@try</span> &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"try"</span>);</div><div class="line">    <span class="built_in">NSString</span> *name = <span class="literal">nil</span>;</div><div class="line">    <span class="built_in">NSDictionary</span> *info = @&#123;<span class="string">@"name"</span>:name&#125;;</div><div class="line">&#125; <span class="keyword">@catch</span> (<span class="built_in">NSException</span> *e) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,e);</div><div class="line">&#125; <span class="keyword">@finally</span> &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"finally"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>控制台输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">try</div><div class="line">*** -[__NSPlaceholderDictionary initWithObjects:forKeys:count:]: attempt to insert nil object from objects[0]</div><div class="line">finally</div></pre></td></tr></table></figure></p>
<h3 id="异常收集"><a href="#异常收集" class="headerlink" title="异常收集"></a>异常收集</h3><p>当app抛出异常时，我们需要及时的收集这些异常信息，以便我们定位问题并修复BUG。系统为我们提供了<code>NSSetUncaughtExceptionHandler()</code>函数，该函数接受一个c的函数指针，当抛出异常就会回调该函数，并传入异常对象。在这个函数中我们可以将异常的详情存到沙盒或者传到服务器（<strong>必须为同步方式上传，因为这个函数return之后，程序就退出了</strong>）。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">void</span> uncaughtExceptionHandler(<span class="built_in">NSException</span> *exception) &#123;</div><div class="line">    <span class="built_in">NSString</span> *documentDirectory = <span class="built_in">NSSearchPathForDirectoriesInDomains</span>(<span class="built_in">NSDocumentDirectory</span>, <span class="built_in">NSUserDomainMask</span>, <span class="literal">YES</span>)[<span class="number">0</span>];</div><div class="line">    <span class="built_in">NSString</span> *filePath = [documentDirectory stringByAppendingPathComponent:<span class="string">@"exception.log"</span>];</div><div class="line">    <span class="built_in">NSString</span> *log = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"%@ \n %@"</span>,exception,exception.callStackSymbols];</div><div class="line">    [log writeToFile:filePath atomically:<span class="literal">YES</span> encoding:<span class="built_in">NSUTF8StringEncoding</span> error:<span class="literal">NULL</span>];</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions &#123;</div><div class="line">    <span class="built_in">NSSetUncaughtExceptionHandler</span>(uncaughtExceptionHandler);</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;NSException&lt;br&gt;
    
    </summary>
    
    
      <category term="Foundation" scheme="http://simonyang.cn/tags/Foundation/"/>
    
  </entry>
  
  <entry>
    <title>使用FileHandle读写文件</title>
    <link href="http://simonyang.cn/2017/06/06/FileHandle/"/>
    <id>http://simonyang.cn/2017/06/06/FileHandle/</id>
    <published>2017-06-06T07:19:47.000Z</published>
    <updated>2017-10-16T16:23:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建一个读取的filehandle"><a href="#创建一个读取的filehandle" class="headerlink" title="创建一个读取的filehandle"></a>创建一个读取的filehandle</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">var</span> path = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.documentDirectory, .userDomainMask, <span class="literal">true</span>)[<span class="number">0</span>]</div><div class="line">path.append(<span class="string">"/log.txt"</span>)</div><div class="line"><span class="keyword">if</span> !<span class="type">FileManager</span>.<span class="keyword">default</span>.fileExists(atPath: path) &#123;</div><div class="line">    <span class="type">FileManager</span>.<span class="keyword">default</span>.createFile(atPath: path, contents: <span class="literal">nil</span>, attributes: <span class="literal">nil</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileHandle = <span class="type">FileHandle</span>(forUpdatingAtPath: path) &#123;</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="number">10</span> &#123;</div><div class="line">        <span class="keyword">let</span> log = <span class="string">"id:<span class="subst">\(i)</span>"</span></div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> data = log.data(using: .utf8) &#123;</div><div class="line">            fileHandle.write(data)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fileHandle.synchronizeFile()</div><div class="line"></div><div class="line">    <span class="built_in">print</span>(fileHandle.availableData.<span class="built_in">count</span>)</div><div class="line"></div><div class="line">    fileHandle.seek(toFileOffset: <span class="number">2</span>)</div><div class="line"></div><div class="line">    <span class="keyword">let</span> logs = <span class="type">String</span>(data: fileHandle.readDataToEndOfFile(), encoding: .utf8)!</div><div class="line">    <span class="built_in">print</span>(logs)</div><div class="line"></div><div class="line"></div><div class="line">    fileHandle.closeFile()</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="创建一个写入的fileHandle"><a href="#创建一个写入的fileHandle" class="headerlink" title="创建一个写入的fileHandle"></a>创建一个写入的fileHandle</h3><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="type">NSSearchPathForDirectoriesInDomains</span>(.documentDirectory, .userDomainMask, <span class="literal">true</span>)[<span class="number">0</span>]</div><div class="line">path.append(<span class="string">"/log.txt"</span>)</div><div class="line"><span class="keyword">if</span> !<span class="type">FileManager</span>.<span class="keyword">default</span>.fileExists(atPath: path) &#123;</div><div class="line">    <span class="type">FileManager</span>.<span class="keyword">default</span>.createFile(atPath: path, contents: <span class="literal">nil</span>, attributes: <span class="literal">nil</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> fileHandle = <span class="type">FileHandle</span>(forUpdatingAtPath: path) &#123;</div><div class="line">    fileHandle.synchronizeFile()</div><div class="line">    fileHandle.closeFile()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="异步读写"><a href="#异步读写" class="headerlink" title="异步读写"></a>异步读写</h3>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建一个读取的filehandle&quot;&gt;&lt;a href=&quot;#创建一个读取的filehandle&quot; class=&quot;headerlink&quot; title=&quot;创建一个读取的filehandle&quot;&gt;&lt;/a&gt;创建一个读取的filehandle&lt;/h3&gt;&lt;figure class
    
    </summary>
    
      <category term="Cocoa" scheme="http://simonyang.cn/categories/Cocoa/"/>
    
    
      <category term="Foundation" scheme="http://simonyang.cn/tags/Foundation/"/>
    
  </entry>
  
  <entry>
    <title>Pthread</title>
    <link href="http://simonyang.cn/2017/04/24/pthread/"/>
    <id>http://simonyang.cn/2017/04/24/pthread/</id>
    <published>2017-04-24T05:22:34.000Z</published>
    <updated>2017-12-08T16:28:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>当一个对象接收到不存在的方法时，默认情况下，程序会抛出异常：<br><a id="more"></a></p>
<h3 id="线程创建"><a href="#线程创建" class="headerlink" title="线程创建"></a>线程创建</h3><p>启动程序时，进程中只有一条主线程，创建一条线程使用<code>pthread_create()</code>函数。<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int pthread_create(pthread_t *,const pthread_attr_t *,void *(*)(void *), void *);</div></pre></td></tr></table></figure></p>
<h3 id="线程终止"><a href="#线程终止" class="headerlink" title="线程终止"></a>线程终止</h3><ul>
<li>线程start函数执行return并返回指定值</li>
<li>线程调用pthread_exit()</li>
<li>调用pthread_cancel()取消线程</li>
<li>任意线程调用exit()，或主线程在main函数中return，都会导致进程中所有线程立即终止</li>
</ul>
<h2 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h2><h3 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h3><p>初始化互斥锁： </p>
<p>加锁：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_lock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *)</span></span>;</div></pre></td></tr></table></figure></p>
<p>如果加锁时互斥锁处于未锁定状态，该函数会加锁并立即返回。如果其他线程已经对该互斥锁加锁，那么该函数会一只阻塞，直到互斥锁解锁，再锁定并返回。<br>解锁：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">pthread_mutex_unlock</span><span class="params">(<span class="keyword">pthread_mutex_t</span> *)</span></span>;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当一个对象接收到不存在的方法时，默认情况下，程序会抛出异常：&lt;br&gt;
    
    </summary>
    
      <category term="Cocoa" scheme="http://simonyang.cn/categories/Cocoa/"/>
    
    
      <category term="多线程" scheme="http://simonyang.cn/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
      <category term="pthread" scheme="http://simonyang.cn/tags/pthread/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C消息转发</title>
    <link href="http://simonyang.cn/2017/04/18/MethodForward/"/>
    <id>http://simonyang.cn/2017/04/18/MethodForward/</id>
    <published>2017-04-17T16:54:35.000Z</published>
    <updated>2017-12-08T16:27:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>当一个对象接收到不存在的方法时，默认情况下，程序会抛出异常：</p>
<a id="more"></a>
<h2 id="performSelector"><a href="#performSelector" class="headerlink" title="performSelector"></a>performSelector</h2><p>当一个对象接收到不存在的方法时，默认情况下，程序会抛出异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-[TestObjHelper someMethod]: unrecognized selector sent to instance 0x608000015230</div><div class="line">*** Terminating app due to uncaught exception &apos;NSInvalidArgumentException&apos;, reason: &apos;-[TestObjHelper someMethod]: unrecognized selector sent to instance 0x608000015230&apos;</div></pre></td></tr></table></figure></p>
<h3 id="动态方法解析"><a href="#动态方法解析" class="headerlink" title="动态方法解析"></a>动态方法解析</h3><p>对象在收到不存的方法，如果是类方法，会调用<code>+resolveClassMethod:</code>,如果是实例方法，会调用<code>+resolveInstanceMethod:</code>。在这个方法中我们可以通过<code>class_addMethod</code>为该类动态添加该方法，并返回<code>YES</code>，此时该对象会响应新增的<code>selector</code>。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TestObj</span></span></div><div class="line"></div><div class="line"><span class="keyword">void</span> someMethodImp(<span class="keyword">id</span> <span class="keyword">self</span>,SEL _cmd) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ %p"</span>,<span class="keyword">self</span>,_cmd);</div><div class="line">&#125;</div><div class="line"></div><div class="line">+ (<span class="built_in">BOOL</span>)resolveInstanceMethod:(SEL)sel &#123;</div><div class="line">    <span class="keyword">if</span> ([<span class="built_in">NSStringFromSelector</span>(sel) isEqualToString:<span class="string">@"someMethod"</span>]) &#123;</div><div class="line">        class_addMethod(<span class="keyword">self</span>, sel, (IMP)someMethodImp, <span class="string">"@:"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> [<span class="keyword">super</span> resolveInstanceMethod:sel];</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line">[[TestObj new] performSelector:<span class="keyword">@selector</span>(someMethod)];</div><div class="line"></div><div class="line"><span class="comment">//&lt;TestObj: 0x608000008a50&gt; 0x10ade7b24</span></div></pre></td></tr></table></figure>
<h3 id="备用接受者"><a href="#备用接受者" class="headerlink" title="备用接受者"></a>备用接受者</h3><p>如果上一步没有实现，则会继续调用如下方法：<br><figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector</div></pre></td></tr></table></figure></p>
<p>该方法尝试获取一个能够处理该消息的对象，如果有，返回该对象，runtime会将消息转发到该对象。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TestObjHelper</span></span></div><div class="line"></div><div class="line">- (<span class="keyword">void</span>)someMethod &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@ %p"</span>,<span class="keyword">self</span>,_cmd);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TestObj</span></span></div><div class="line"></div><div class="line">-(<span class="keyword">id</span>)forwardingTargetForSelector:(SEL)aSelector &#123;</div><div class="line">    <span class="keyword">return</span> [TestObjHelper new];</div><div class="line">&#125;</div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[[TestObj new] performSelector:<span class="keyword">@selector</span>(someMethod)];</div><div class="line"><span class="comment">//&lt;TestObjHelper: 0x61000000dff0&gt; 0x106da4b2a</span></div></pre></td></tr></table></figure>
<p>如果返回的对象不能处理消息，则会走该对象的消息转发流程。不能返回<code>self</code>，否则会陷入死循环。如果返回nil，则继续执行下面的过程。</p>
<h3 id="完整的消息转发"><a href="#完整的消息转发" class="headerlink" title="完整的消息转发"></a>完整的消息转发</h3><h2 id="objc-msgForward"><a href="#objc-msgForward" class="headerlink" title="_objc_msgForward"></a>_objc_msgForward</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当一个对象接收到不存在的方法时，默认情况下，程序会抛出异常：&lt;/p&gt;
    
    </summary>
    
      <category term="Objective-C" scheme="http://simonyang.cn/categories/Objective-C/"/>
    
    
  </entry>
  
  <entry>
    <title>URLProtocol</title>
    <link href="http://simonyang.cn/2017/04/15/URLProtocol/"/>
    <id>http://simonyang.cn/2017/04/15/URLProtocol/</id>
    <published>2017-04-15T11:51:17.000Z</published>
    <updated>2017-04-15T11:51:17.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用正则表达式</title>
    <link href="http://simonyang.cn/2017/04/10/RegEx/"/>
    <id>http://simonyang.cn/2017/04/10/RegEx/</id>
    <published>2017-04-10T14:16:47.000Z</published>
    <updated>2017-08-18T18:14:57.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Swift" scheme="http://simonyang.cn/categories/Swift/"/>
    
    
  </entry>
  
</feed>
